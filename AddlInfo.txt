# additional info of functionality added to project

Cookie based authentication vs Token based authentication:

Stateful, server keeps track of active sessions in database, FE a cookie is created, holds session identifier
cookie with sessionID is placed in users browser. When log out, both sessions destroyed

JWT=stateless, server doesnt keep record of which users are logged in or tokens issues. Instead
every request to server includes token set usually in Authorization header in form of Bearer{JWT} or in body
token usually stored in local storage or session storage or cookie
Tokens areself contained, no server keeping record. Server only signs login requests and verify validity
Often 3rd party services like Auth() handle issuing tokens so server only needs to verify tokens

Tokens better with CORS enabled makes it easy to expose APIs to different services and domains. Cookies only store sessionId
tokens can store any type of data (usually include userId and expiration)
Cookie authentication is slower, needs a lookup to db
Token auth just decode token, can also have user's permission level and save additional lookups for what services available to user
Tokens are signed not encrypted so sensitive data here is no go

Swagger:
swagger.json - contain basic metadata about the API then reflected in localhost/swagger
nginx set up /location to route to swagger docs
configuration file can also be written in YAML - swagger.yml; use json to yaml online converter
docker-compose.yml => define volume and environment (pointing to swagger.json)


TODO:
refactor e2e tests cypress and unittests
add validation logic for user,email,password in unit tests (only in e2e) tests [special characters restrictions?]
refactor utilities into separate file where available
